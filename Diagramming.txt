
_ _ _ _ _ _ _
_ _ _ _ _ _ _
_ _ _ _ _ _ _
_ _ _ _ _ _ _
_ _ _ _ _ _ _
_ _ _ _ _ _ _

    	    0  1  2  3  4  5  6
  
	0   0  1  2  3  4  5  6
	1   7  8  9  10 11 12 13 
	2   14 15 16 17 18 19 20
	3   21 22 23 24 25 26 27
	4   28 29 30 31 32 33 34
	5   35 36 37 38 39 40 41


	/* Increasing Diagonals: 
	 * 3 9 15 21; 4 10 16 22 28; 
	 * 5 11 17 23 29 35; 6 12 18 24 30 36;
	 * 13 19 25 31 37; 20 26 32 38
	 */
	 
	public static int[] diagUpStartingI = {3, 4, 5, 6, 13, 20};


	
	/* Decreasing Diagonals: 
	 * 14 22 30 38; 7 15 23 31 39;
	 * 0 8 16 24 32 40; 1 9 17 25 33 41;
	 * 2 10 18 26 34; 3 11 19 27
	 */

	int[] diagDownStartingI = {0, 1, 2, 3, 7, 14};
	
	
	public ArrayList<Integer> findDiagCandidates(int[] diagUpOrDownStartingI, String UpOrDown)
	{

		ArrayList<Integer> candidatesDiag = new ArrayLaist<>();
		
		int increment = 1;
		
		if(UpOrDown.equals("Up"))
		{
			increment = 6;
		}
		else // UpOrDown = "Down"
		{
			increment = 8;
		}

		for(int start : diagUpOrDownStartingI)
		{

			int index = start;
			
			int tally = 0;
			
			while(index <= 41)
			{
				int rowIndex = index/7; // thanks to floor division
				int columnIndex = column % 7;
				
				tally += cellAsInt(gameboard[row][column]);
				
				index += increment; 
			}
			
			if(tally % 10 >= 4 || tally/10 >= 4))
			{
				candidatesDiag.add(start);
			}
		}
		
		return candidatesDiag;

	}
	
	public checkDiagWin(ArrayList<Integer> candidatesDiag, String UpOrDown)
	{
		if(UpOrDown.equals("Up"))
		{
			increment = 6;
		}
		else // UpOrDown = "Down"
		{
			increment = 8;
		}
		
		
		for(int start : candidatesDiag)
		{

			int index = start;
			
			ArrayList<Integer> targetAL = new ArrayList<>();
			
			while(index <= 41)
			{
				int rowIndex = index/7;      // thanks to floor division
				int columnIndex = column % 7;
				
				targetAL.add(cellAsInt(gameboard[row][column]);
				
				index += increment; 
			}
			
			
			int diagSum = 0;
			for(int num : targetAL)
			{
				diagSum += num;
			}

			if(diagSum % 10 >= 4) // means there are 4 or more tokens with color=true
			{
				int streak = 0;

				for(int num : targetAL)
				{
					if(num == 1)
					{
						streak++;
					}
					else
					{
						streak = 0;
					}

					if(streak >= 4)
					{
						return true;
					}
				}
			}
			/* else if chosen here because we can't have a win condition for one
			   if the other has one */
			else if(diagSum/10 >= 4) // only when 4 or more tokens have color==false
			{
				int streak = 0;

				for(int num : targetAL)
				{
					if(num == 10)
					{
						streak++;
					}
					else
					{
						streak = 0;
					}

					if(streak >= 4)
					{
						return true;
					}
				}
			}
			return false;
		}
	}




